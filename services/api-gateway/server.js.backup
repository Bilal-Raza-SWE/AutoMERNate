import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';
import cors from 'cors';
import 'dotenv/config';

const app = express();
const PORT = process.env.API_GATEWAY_PORT || 5000;

// CORS configuration - MUST be first
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie'],
  exposedHeaders: ['Set-Cookie']
}));

// Health Check - DON'T use express.json() here as it affects proxy routes
app.get('/health', (req, res) => {
  res.json({ 
    service: 'API Gateway', 
    status: 'healthy',
    port: PORT,
    timestamp: new Date().toISOString(),
    routes: {
      products: process.env.PRODUCT_SERVICE_URL || 'http://localhost:5001',
      users: process.env.USER_SERVICE_URL || 'http://localhost:5002',
      orders: process.env.ORDER_SERVICE_URL || 'http://localhost:5003',
      payment: process.env.PAYMENT_SERVICE_URL || 'http://localhost:5004',
      notifications: process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:5005'
    }
  });
});

// Route to Product Service
app.use('/api/v1/products', createProxyMiddleware({ 
  target: process.env.PRODUCT_SERVICE_URL || 'http://localhost:5001',
  changeOrigin: true,
  logLevel: 'debug',
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing to Product Service: ${req.method} ${req.originalUrl}`);
  },
  onError: (err, req, res) => {
    console.error(`❌ Product Service proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error connecting to Product Service',
      error: err.message 
    });
  }
}));

// Route to User Service  
app.use('/api/v1/users', createProxyMiddleware({ 
  target: process.env.USER_SERVICE_URL || 'http://localhost:5002',
  changeOrigin: true,
  logLevel: 'debug',
  timeout: 30000,
  proxyTimeout: 30000,
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing to User Service: ${req.method} ${req.originalUrl}`);
    // Forward cookies
    if (req.headers.cookie) {
      proxyReq.setHeader('Cookie', req.headers.cookie);
    }
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`✅ User Service responded: ${proxyRes.statusCode}`);
    // Forward set-cookie headers
    const setCookie = proxyRes.headers['set-cookie'];
    if (setCookie) {
      res.setHeader('Set-Cookie', setCookie);
    }
  },
  onError: (err, req, res) => {
    console.error(`❌ User Service proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error connecting to User Service',
      error: err.message 
    });
  }
}));

// Route to Order Service
app.use('/api/v1/orders', createProxyMiddleware({ 
  target: process.env.ORDER_SERVICE_URL || 'http://localhost:5003',
  changeOrigin: true,
  logLevel: 'debug',
  timeout: 30000,
  proxyTimeout: 30000,
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing to Order Service: ${req.method} ${req.originalUrl}`);
    // Forward cookies
    if (req.headers.cookie) {
      proxyReq.setHeader('Cookie', req.headers.cookie);
    }
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`✅ Order Service responded: ${proxyRes.statusCode}`);
    // Forward set-cookie headers
    const setCookie = proxyRes.headers['set-cookie'];
    if (setCookie) {
      res.setHeader('Set-Cookie', setCookie);
    }
  },
  onError: (err, req, res) => {
    console.error(`❌ Order Service proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error connecting to Order Service',
      error: err.message 
    });
  }
}));

// Route to Payment Service
app.use('/api/v1/payment', createProxyMiddleware({ 
  target: process.env.PAYMENT_SERVICE_URL || 'http://localhost:5004',
  changeOrigin: true,
  logLevel: 'debug',
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing to Payment Service: ${req.method} ${req.originalUrl}`);
  },
  onError: (err, req, res) => {
    console.error(`❌ Payment Service proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error connecting to Payment Service',
      error: err.message 
    });
  }
}));

// Route to Notification Service
app.use('/api/v1/notifications', createProxyMiddleware({ 
  target: process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:5005',
  changeOrigin: true,
  logLevel: 'debug',
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing to Notification Service: ${req.method} ${req.originalUrl}`);
  },
  onError: (err, req, res) => {
    console.error(`❌ Notification Service proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error connecting to Notification Service',
      error: err.message 
    });
  }
}));

// Route to Upload (handled by Product Service)
app.use('/api/v1/upload', createProxyMiddleware({ 
  target: process.env.PRODUCT_SERVICE_URL || 'http://localhost:5001',
  changeOrigin: true,
  logLevel: 'debug',
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Routing upload to Product Service: ${req.method} ${req.originalUrl}`);
  },
  onError: (err, req, res) => {
    console.error(`❌ Upload proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error uploading to Product Service',
      error: err.message 
    });
  }
}));

// Proxy uploads folder to Product Service
app.use('/uploads', createProxyMiddleware({ 
  target: process.env.PRODUCT_SERVICE_URL || 'http://localhost:5001',
  changeOrigin: true,
  logLevel: 'debug',
  onProxyReq: (proxyReq, req, res) => {
    console.log(`🔀 Serving static file: ${req.originalUrl}`);
  },
  onError: (err, req, res) => {
    console.error(`❌ Static file proxy error: ${err.message}`);
    res.status(500).json({ 
      message: 'Error serving static file',
      error: err.message 
    });
  }
}));

// Fallback route
app.use('*', (req, res) => {
  res.status(404).json({ 
    message: 'Route not found in API Gateway',
    path: req.originalUrl
  });
});

app.listen(PORT, () => {
  console.log(`🚪 API Gateway running on port ${PORT}`);
  console.log(`📡 Routing requests to microservices:`);
  console.log(`   - Products: ${process.env.PRODUCT_SERVICE_URL || 'http://localhost:5001'}`);
  console.log(`   - Users: ${process.env.USER_SERVICE_URL || 'http://localhost:5002'}`);
  console.log(`   - Orders: ${process.env.ORDER_SERVICE_URL || 'http://localhost:5003'}`);
  console.log(`   - Payment: ${process.env.PAYMENT_SERVICE_URL || 'http://localhost:5004'}`);
  console.log(`   - Notifications: ${process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:5005'}`);
});
