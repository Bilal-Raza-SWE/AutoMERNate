name: AutoMERNate CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          services/*/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Test frontend
      working-directory: ./frontend
      run: npm test -- --passWithNoTests

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: frontend
            context: .
            dockerfile: frontend/Dockerfile
          - name: api-gateway
            context: ./services/api-gateway
            dockerfile: Dockerfile
          - name: product-service
            context: ./services/product-service
            dockerfile: Dockerfile
          - name: user-service
            context: ./services/user-service
            dockerfile: Dockerfile
          - name: order-service
            context: ./services/order-service
            dockerfile: Dockerfile
          - name: payment-service
            context: ./services/payment-service
            dockerfile: Dockerfile
          - name: notification-service
            context: ./services/notification-service
            dockerfile: Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/automernate-${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-minikube:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start Minikube
      uses: medyagh/setup-minikube@latest
      with:
        cpus: 4
        memory: 8192
        kubernetes-version: v1.28.0

    - name: Create namespace
      run: kubectl create namespace automernate --dry-run=client -o yaml | kubectl apply -f -

    - name: Create secrets
      run: |
        kubectl create secret generic automernate-secrets \
          --from-literal=mongo-uri="${{ secrets.MONGO_URI }}" \
          --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
          --from-literal=razorpay-key-id="${{ secrets.RAZORPAY_KEY_ID }}" \
          --from-literal=razorpay-key-secret="${{ secrets.RAZORPAY_KEY_SECRET }}" \
          --from-literal=email-host="smtp.gmail.com" \
          --from-literal=email-port="587" \
          --from-literal=email-user="${{ secrets.EMAIL_USER }}" \
          --from-literal=email-pass="${{ secrets.EMAIL_PASS }}" \
          -n automernate \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/
        
    - name: Wait for deployments
      run: |
        kubectl wait --for=condition=available --timeout=300s \
          deployment/api-gateway \
          deployment/product-service \
          deployment/user-service \
          -n automernate

    - name: Get deployment status
      run: |
        kubectl get pods -n automernate
        kubectl get svc -n automernate

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
